// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/contiv/vpp/plugins/crd/pkg/apis/contivppio/v1"
	scheme "github.com/contiv/vpp/plugins/crd/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ExternalInterfacesGetter has a method to return a ExternalInterfaceInterface.
// A group's client should implement this interface.
type ExternalInterfacesGetter interface {
	ExternalInterfaces(namespace string) ExternalInterfaceInterface
}

// ExternalInterfaceInterface has methods to work with ExternalInterface resources.
type ExternalInterfaceInterface interface {
	Create(*v1.ExternalInterface) (*v1.ExternalInterface, error)
	Update(*v1.ExternalInterface) (*v1.ExternalInterface, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ExternalInterface, error)
	List(opts metav1.ListOptions) (*v1.ExternalInterfaceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ExternalInterface, err error)
	ExternalInterfaceExpansion
}

// externalInterfaces implements ExternalInterfaceInterface
type externalInterfaces struct {
	client rest.Interface
	ns     string
}

// newExternalInterfaces returns a ExternalInterfaces
func newExternalInterfaces(c *ContivppV1Client, namespace string) *externalInterfaces {
	return &externalInterfaces{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the externalInterface, and returns the corresponding externalInterface object, and an error if there is any.
func (c *externalInterfaces) Get(name string, options metav1.GetOptions) (result *v1.ExternalInterface, err error) {
	result = &v1.ExternalInterface{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("externalinterfaces").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ExternalInterfaces that match those selectors.
func (c *externalInterfaces) List(opts metav1.ListOptions) (result *v1.ExternalInterfaceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ExternalInterfaceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("externalinterfaces").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested externalInterfaces.
func (c *externalInterfaces) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("externalinterfaces").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a externalInterface and creates it.  Returns the server's representation of the externalInterface, and an error, if there is any.
func (c *externalInterfaces) Create(externalInterface *v1.ExternalInterface) (result *v1.ExternalInterface, err error) {
	result = &v1.ExternalInterface{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("externalinterfaces").
		Body(externalInterface).
		Do().
		Into(result)
	return
}

// Update takes the representation of a externalInterface and updates it. Returns the server's representation of the externalInterface, and an error, if there is any.
func (c *externalInterfaces) Update(externalInterface *v1.ExternalInterface) (result *v1.ExternalInterface, err error) {
	result = &v1.ExternalInterface{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("externalinterfaces").
		Name(externalInterface.Name).
		Body(externalInterface).
		Do().
		Into(result)
	return
}

// Delete takes name of the externalInterface and deletes it. Returns an error if one occurs.
func (c *externalInterfaces) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("externalinterfaces").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *externalInterfaces) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("externalinterfaces").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched externalInterface.
func (c *externalInterfaces) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ExternalInterface, err error) {
	result = &v1.ExternalInterface{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("externalinterfaces").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
