// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	contivppiov1 "github.com/contiv/vpp/plugins/crd/pkg/apis/contivppio/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeServiceFunctionChains implements ServiceFunctionChainInterface
type FakeServiceFunctionChains struct {
	Fake *FakeContivppV1
	ns   string
}

var servicefunctionchainsResource = schema.GroupVersionResource{Group: "contivpp.io", Version: "v1", Resource: "servicefunctionchains"}

var servicefunctionchainsKind = schema.GroupVersionKind{Group: "contivpp.io", Version: "v1", Kind: "ServiceFunctionChain"}

// Get takes name of the serviceFunctionChain, and returns the corresponding serviceFunctionChain object, and an error if there is any.
func (c *FakeServiceFunctionChains) Get(name string, options v1.GetOptions) (result *contivppiov1.ServiceFunctionChain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(servicefunctionchainsResource, c.ns, name), &contivppiov1.ServiceFunctionChain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*contivppiov1.ServiceFunctionChain), err
}

// List takes label and field selectors, and returns the list of ServiceFunctionChains that match those selectors.
func (c *FakeServiceFunctionChains) List(opts v1.ListOptions) (result *contivppiov1.ServiceFunctionChainList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(servicefunctionchainsResource, servicefunctionchainsKind, c.ns, opts), &contivppiov1.ServiceFunctionChainList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &contivppiov1.ServiceFunctionChainList{ListMeta: obj.(*contivppiov1.ServiceFunctionChainList).ListMeta}
	for _, item := range obj.(*contivppiov1.ServiceFunctionChainList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested serviceFunctionChains.
func (c *FakeServiceFunctionChains) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(servicefunctionchainsResource, c.ns, opts))

}

// Create takes the representation of a serviceFunctionChain and creates it.  Returns the server's representation of the serviceFunctionChain, and an error, if there is any.
func (c *FakeServiceFunctionChains) Create(serviceFunctionChain *contivppiov1.ServiceFunctionChain) (result *contivppiov1.ServiceFunctionChain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(servicefunctionchainsResource, c.ns, serviceFunctionChain), &contivppiov1.ServiceFunctionChain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*contivppiov1.ServiceFunctionChain), err
}

// Update takes the representation of a serviceFunctionChain and updates it. Returns the server's representation of the serviceFunctionChain, and an error, if there is any.
func (c *FakeServiceFunctionChains) Update(serviceFunctionChain *contivppiov1.ServiceFunctionChain) (result *contivppiov1.ServiceFunctionChain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(servicefunctionchainsResource, c.ns, serviceFunctionChain), &contivppiov1.ServiceFunctionChain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*contivppiov1.ServiceFunctionChain), err
}

// Delete takes name of the serviceFunctionChain and deletes it. Returns an error if one occurs.
func (c *FakeServiceFunctionChains) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(servicefunctionchainsResource, c.ns, name), &contivppiov1.ServiceFunctionChain{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeServiceFunctionChains) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(servicefunctionchainsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &contivppiov1.ServiceFunctionChainList{})
	return err
}

// Patch applies the patch and returns the patched serviceFunctionChain.
func (c *FakeServiceFunctionChains) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *contivppiov1.ServiceFunctionChain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(servicefunctionchainsResource, c.ns, name, pt, data, subresources...), &contivppiov1.ServiceFunctionChain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*contivppiov1.ServiceFunctionChain), err
}
