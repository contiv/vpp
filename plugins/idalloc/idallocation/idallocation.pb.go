// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: idallocation.proto

package idallocation

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// IDAllocation represents a VXLAN VNI allocation made for the specified unique VXLAN name
type AllocationPool struct {
	Name  string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Range *AllocationPool_Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	// map of all allocations, key is the allocation "label"
	// describing its purpose (e.g. network name for vrf pool, etc.)
	IdAllocations        map[string]*AllocationPool_Allocation `protobuf:"bytes,3,rep,name=id_allocations,json=idAllocations,proto3" json:"id_allocations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *AllocationPool) Reset()         { *m = AllocationPool{} }
func (m *AllocationPool) String() string { return proto.CompactTextString(m) }
func (*AllocationPool) ProtoMessage()    {}
func (*AllocationPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4826bf6deca43300, []int{0}
}
func (m *AllocationPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationPool.Unmarshal(m, b)
}
func (m *AllocationPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationPool.Marshal(b, m, deterministic)
}
func (m *AllocationPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPool.Merge(m, src)
}
func (m *AllocationPool) XXX_Size() int {
	return xxx_messageInfo_AllocationPool.Size(m)
}
func (m *AllocationPool) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPool.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPool proto.InternalMessageInfo

func (m *AllocationPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AllocationPool) GetRange() *AllocationPool_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *AllocationPool) GetIdAllocations() map[string]*AllocationPool_Allocation {
	if m != nil {
		return m.IdAllocations
	}
	return nil
}

type AllocationPool_Range struct {
	MinId                uint32   `protobuf:"varint,1,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	MaxId                uint32   `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Reserved             []uint32 `protobuf:"varint,3,rep,packed,name=reserved,proto3" json:"reserved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationPool_Range) Reset()         { *m = AllocationPool_Range{} }
func (m *AllocationPool_Range) String() string { return proto.CompactTextString(m) }
func (*AllocationPool_Range) ProtoMessage()    {}
func (*AllocationPool_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_4826bf6deca43300, []int{0, 0}
}
func (m *AllocationPool_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationPool_Range.Unmarshal(m, b)
}
func (m *AllocationPool_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationPool_Range.Marshal(b, m, deterministic)
}
func (m *AllocationPool_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPool_Range.Merge(m, src)
}
func (m *AllocationPool_Range) XXX_Size() int {
	return xxx_messageInfo_AllocationPool_Range.Size(m)
}
func (m *AllocationPool_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPool_Range.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPool_Range proto.InternalMessageInfo

func (m *AllocationPool_Range) GetMinId() uint32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *AllocationPool_Range) GetMaxId() uint32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *AllocationPool_Range) GetReserved() []uint32 {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type AllocationPool_Allocation struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationPool_Allocation) Reset()         { *m = AllocationPool_Allocation{} }
func (m *AllocationPool_Allocation) String() string { return proto.CompactTextString(m) }
func (*AllocationPool_Allocation) ProtoMessage()    {}
func (*AllocationPool_Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_4826bf6deca43300, []int{0, 1}
}
func (m *AllocationPool_Allocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationPool_Allocation.Unmarshal(m, b)
}
func (m *AllocationPool_Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationPool_Allocation.Marshal(b, m, deterministic)
}
func (m *AllocationPool_Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPool_Allocation.Merge(m, src)
}
func (m *AllocationPool_Allocation) XXX_Size() int {
	return xxx_messageInfo_AllocationPool_Allocation.Size(m)
}
func (m *AllocationPool_Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPool_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPool_Allocation proto.InternalMessageInfo

func (m *AllocationPool_Allocation) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AllocationPool_Allocation) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocationPool)(nil), "idallocation.AllocationPool")
	proto.RegisterMapType((map[string]*AllocationPool_Allocation)(nil), "idallocation.AllocationPool.IdAllocationsEntry")
	proto.RegisterType((*AllocationPool_Range)(nil), "idallocation.AllocationPool.Range")
	proto.RegisterType((*AllocationPool_Allocation)(nil), "idallocation.AllocationPool.Allocation")
}

func init() { proto.RegisterFile("idallocation.proto", fileDescriptor_4826bf6deca43300) }

var fileDescriptor_4826bf6deca43300 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xc9, 0xe6, 0xbf, 0xe5, 0xdf, 0xa9, 0x09, 0x32, 0x28, 0x84, 0x9c, 0x42, 0x2f, 0xe6,
	0x14, 0x21, 0x5e, 0x8a, 0xe0, 0xc1, 0x83, 0x87, 0xdc, 0x74, 0x0f, 0x5e, 0xcb, 0xea, 0x2e, 0x32,
	0x98, 0xec, 0xca, 0x26, 0xd6, 0xf6, 0x1b, 0xf9, 0x31, 0x25, 0x9b, 0x9a, 0xb4, 0x08, 0xbd, 0xcd,
	0xfb, 0x31, 0xf3, 0xe6, 0xed, 0x2c, 0x20, 0x29, 0x59, 0xd7, 0xf6, 0x55, 0x76, 0x64, 0x4d, 0xf1,
	0xe1, 0x6c, 0x67, 0xf1, 0xec, 0x90, 0x2d, 0xbf, 0x43, 0x88, 0xef, 0x47, 0xf9, 0x68, 0x6d, 0x8d,
	0x08, 0xff, 0x8c, 0x6c, 0x74, 0x12, 0x64, 0x41, 0x3e, 0x17, 0xbe, 0xc6, 0x15, 0x70, 0x27, 0xcd,
	0x9b, 0x4e, 0x58, 0x16, 0xe4, 0x8b, 0x72, 0x59, 0x1c, 0x19, 0x1f, 0x1b, 0x14, 0xa2, 0xef, 0x14,
	0xc3, 0x00, 0x3e, 0x43, 0x4c, 0x6a, 0x3d, 0x35, 0xb7, 0x49, 0x98, 0x85, 0xf9, 0xa2, 0xbc, 0x3e,
	0x69, 0x51, 0xa9, 0x09, 0xb4, 0x0f, 0xa6, 0x73, 0x3b, 0x11, 0xd1, 0x21, 0x4b, 0x9f, 0x80, 0xfb,
	0x3d, 0x78, 0x09, 0xb3, 0x86, 0xcc, 0x9a, 0x94, 0x0f, 0x1c, 0x09, 0xde, 0x90, 0xa9, 0x94, 0xc7,
	0x72, 0xdb, 0x63, 0xb6, 0xc7, 0x72, 0x5b, 0x29, 0x4c, 0xe1, 0xbf, 0xd3, 0xad, 0x76, 0x1b, 0xad,
	0x7c, 0x90, 0x48, 0x8c, 0x3a, 0x2d, 0x01, 0xa6, 0x0d, 0x18, 0x03, 0x1b, 0x3d, 0x19, 0x29, 0xbc,
	0x00, 0x6e, 0xbf, 0x8c, 0x76, 0xde, 0x6f, 0x2e, 0x06, 0x91, 0x12, 0xe0, 0xdf, 0xac, 0x78, 0x0e,
	0xe1, 0xbb, 0xde, 0xed, 0x2f, 0xd8, 0x97, 0x78, 0x07, 0x7c, 0x23, 0xeb, 0xcf, 0xdf, 0x03, 0x5e,
	0x9d, 0x7c, 0xfd, 0x24, 0xc5, 0x30, 0x75, 0xcb, 0x56, 0xc1, 0xcb, 0xcc, 0xff, 0xdf, 0xcd, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x36, 0xc7, 0xa9, 0xd5, 0x01, 0x00, 0x00,
}
