// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

// Package service defines data model for Kubernetes Service.

package service

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Service_ServicePort_IntOrString_Type int32

const (
	Service_ServicePort_IntOrString_NUMBER Service_ServicePort_IntOrString_Type = 0
	Service_ServicePort_IntOrString_STRING Service_ServicePort_IntOrString_Type = 1
)

var Service_ServicePort_IntOrString_Type_name = map[int32]string{
	0: "NUMBER",
	1: "STRING",
}

var Service_ServicePort_IntOrString_Type_value = map[string]int32{
	"NUMBER": 0,
	"STRING": 1,
}

func (x Service_ServicePort_IntOrString_Type) String() string {
	return proto.EnumName(Service_ServicePort_IntOrString_Type_name, int32(x))
}

func (Service_ServicePort_IntOrString_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0, 0, 0}
}

// Service is a named abstraction of software service (for example, mysql)
// consisting of local port (for example 3306) that the proxy listens on,
// and the selector that determines which pods will answer requests sent
// through the proxy.
type Service struct {
	// Name of the service unique within the namespace.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace the service is inserted into.
	// An empty namespace is equivalent to the "default" namespace, but "default"
	// is the canonical representation used in the key for a key-value store.
	// Cannot be updated.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The list of ports that are exposed by this service.
	Port []*Service_ServicePort `protobuf:"bytes,3,rep,name=port,proto3" json:"port,omitempty"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	// +optional
	Selector map[string]string `protobuf:"bytes,4,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ClusterIP is the IP address of the service and is usually assigned
	// randomly by the master. If an address is specified manually and is not in
	// use by others, it will be allocated to the service; otherwise, creation
	// of the service will fail. This field can not be changed through updates.
	// Valid values are "None", empty string (""), or a valid IP address. "None"
	// can be specified for headless services when proxying is not required.
	// Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if
	// type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	// +optional
	ClusterIp string `protobuf:"bytes,5,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,omitempty"`
	// ServiceType determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ExternalName" maps to the specified externalName.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is
	// not specified, by manual construction of an Endpoints object. If
	// clusterIP is "None", no virtual IP is allocated and the endpoints are
	// published as a set of endpoints rather than a stable IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an
	// external load-balancer (if supported in the current cloud) which routes
	// to the clusterIP.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
	// +optional
	ServiceType string `protobuf:"bytes,6,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// ExternalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed
	// by Kubernetes.  The user is responsible for ensuring that traffic
	// arrives at a node with this IP.  A common example is external
	// load-balancers that are not part of the Kubernetes system.
	// +optional
	ExternalIps []string `protobuf:"bytes,7,rep,name=external_ips,json=externalIps,proto3" json:"external_ips,omitempty"`
	// A list of IP addresses set as ingress points for IP-based load-balancers
	// (typically GCE, MetalLB or OpenStack load-balancers).
	// Only applies to Service Type: LoadBalancer
	// +optional
	LbIngressIps []string `protobuf:"bytes,8,rep,name=lb_ingress_ips,json=lbIngressIps,proto3" json:"lb_ingress_ips,omitempty"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	// +optional
	SessionAffinity string `protobuf:"bytes,9,opt,name=session_affinity,json=sessionAffinity,proto3" json:"session_affinity,omitempty"`
	// Only applies to Service Type: LoadBalancer
	// LoadBalancer will get created with the IP specified in this field.
	// This feature depends on whether the underlying cloud-provider supports
	// specifying the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the
	// feature.
	// +optional
	LoadbalancerIp string `protobuf:"bytes,10,opt,name=loadbalancer_ip,json=loadbalancerIp,proto3" json:"loadbalancer_ip,omitempty"`
	// If specified and supported by the platform, this will restrict traffic
	// through the cloud-provider load-balancer will be restricted to the
	// specified client IPs. This field will be ignored if the cloud-provider
	// does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	// +optional
	LoadbalancerSourceRanges []string `protobuf:"bytes,11,rep,name=loadbalancer_source_ranges,json=loadbalancerSourceRanges,proto3" json:"loadbalancer_source_ranges,omitempty"`
	// externalTrafficPolicy denotes if this Service desires to route external
	// traffic to node-local or cluster-wide endpoints. "Local" preserves the
	// client source IP and avoids a second hop for LoadBalancer and Nodeport
	// type services, but risks potentially imbalanced traffic spreading.
	// "Cluster" obscures the client source IP and may cause a second hop to
	// another node, but should have good overall load-spreading.
	// +optional
	ExternalTrafficPolicy string `protobuf:"bytes,12,opt,name=external_traffic_policy,json=externalTrafficPolicy,proto3" json:"external_traffic_policy,omitempty"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// If not specified, HealthCheckNodePort is created by the service api
	// backend with the allocated nodePort. Will use user-specified nodePort
	// value if specified by the client. Only effects when Type is set to
	// LoadBalancer and ExternalTrafficPolicy is set to Local.
	// +optional
	HealthCheckNodePort int32 `protobuf:"varint,13,opt,name=health_check_node_port,json=healthCheckNodePort,proto3" json:"health_check_node_port,omitempty"`
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day).
	// Default value is 10800(for 3 hours). 0 - means that affinity is disabled.
	SessionAffinityTimeout uint32 `protobuf:"varint,14,opt,name=session_affinity_timeout,json=sessionAffinityTimeout,proto3" json:"session_affinity_timeout,omitempty"`
	// annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	Annotations          map[string]string `protobuf:"bytes,15,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Service) GetPort() []*Service_ServicePort {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Service) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *Service) GetClusterIp() string {
	if m != nil {
		return m.ClusterIp
	}
	return ""
}

func (m *Service) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *Service) GetExternalIps() []string {
	if m != nil {
		return m.ExternalIps
	}
	return nil
}

func (m *Service) GetLbIngressIps() []string {
	if m != nil {
		return m.LbIngressIps
	}
	return nil
}

func (m *Service) GetSessionAffinity() string {
	if m != nil {
		return m.SessionAffinity
	}
	return ""
}

func (m *Service) GetLoadbalancerIp() string {
	if m != nil {
		return m.LoadbalancerIp
	}
	return ""
}

func (m *Service) GetLoadbalancerSourceRanges() []string {
	if m != nil {
		return m.LoadbalancerSourceRanges
	}
	return nil
}

func (m *Service) GetExternalTrafficPolicy() string {
	if m != nil {
		return m.ExternalTrafficPolicy
	}
	return ""
}

func (m *Service) GetHealthCheckNodePort() int32 {
	if m != nil {
		return m.HealthCheckNodePort
	}
	return 0
}

func (m *Service) GetSessionAffinityTimeout() uint32 {
	if m != nil {
		return m.SessionAffinityTimeout
	}
	return 0
}

func (m *Service) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// ServicePort contains information on service's port.
type Service_ServicePort struct {
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. This maps to
	// the 'Name' field in EndpointPort objects.
	// Optional if only one ServicePort is defined on this service.
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The IP protocol for this port. Supports "TCP" and "UDP".
	// Default is TCP.
	// +optional
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The port that will be exposed by this service.
	Port       int32                            `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TargetPort *Service_ServicePort_IntOrString `protobuf:"bytes,4,opt,name=target_port,json=targetPort,proto3" json:"target_port,omitempty"`
	// The port on each node on which this service is exposed when
	// type=NodePort or LoadBalancer.
	NodePort             int32    `protobuf:"varint,5,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service_ServicePort) Reset()         { *m = Service_ServicePort{} }
func (m *Service_ServicePort) String() string { return proto.CompactTextString(m) }
func (*Service_ServicePort) ProtoMessage()    {}
func (*Service_ServicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0}
}
func (m *Service_ServicePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_ServicePort.Unmarshal(m, b)
}
func (m *Service_ServicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_ServicePort.Marshal(b, m, deterministic)
}
func (m *Service_ServicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_ServicePort.Merge(m, src)
}
func (m *Service_ServicePort) XXX_Size() int {
	return xxx_messageInfo_Service_ServicePort.Size(m)
}
func (m *Service_ServicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_ServicePort.DiscardUnknown(m)
}

var xxx_messageInfo_Service_ServicePort proto.InternalMessageInfo

func (m *Service_ServicePort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service_ServicePort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Service_ServicePort) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Service_ServicePort) GetTargetPort() *Service_ServicePort_IntOrString {
	if m != nil {
		return m.TargetPort
	}
	return nil
}

func (m *Service_ServicePort) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// +optional
type Service_ServicePort_IntOrString struct {
	Type                 Service_ServicePort_IntOrString_Type `protobuf:"varint,1,opt,name=type,proto3,enum=service.Service_ServicePort_IntOrString_Type" json:"type,omitempty"`
	IntVal               int32                                `protobuf:"varint,2,opt,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	StringVal            string                               `protobuf:"bytes,3,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *Service_ServicePort_IntOrString) Reset()         { *m = Service_ServicePort_IntOrString{} }
func (m *Service_ServicePort_IntOrString) String() string { return proto.CompactTextString(m) }
func (*Service_ServicePort_IntOrString) ProtoMessage()    {}
func (*Service_ServicePort_IntOrString) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0, 0, 0}
}
func (m *Service_ServicePort_IntOrString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service_ServicePort_IntOrString.Unmarshal(m, b)
}
func (m *Service_ServicePort_IntOrString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service_ServicePort_IntOrString.Marshal(b, m, deterministic)
}
func (m *Service_ServicePort_IntOrString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service_ServicePort_IntOrString.Merge(m, src)
}
func (m *Service_ServicePort_IntOrString) XXX_Size() int {
	return xxx_messageInfo_Service_ServicePort_IntOrString.Size(m)
}
func (m *Service_ServicePort_IntOrString) XXX_DiscardUnknown() {
	xxx_messageInfo_Service_ServicePort_IntOrString.DiscardUnknown(m)
}

var xxx_messageInfo_Service_ServicePort_IntOrString proto.InternalMessageInfo

func (m *Service_ServicePort_IntOrString) GetType() Service_ServicePort_IntOrString_Type {
	if m != nil {
		return m.Type
	}
	return Service_ServicePort_IntOrString_NUMBER
}

func (m *Service_ServicePort_IntOrString) GetIntVal() int32 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *Service_ServicePort_IntOrString) GetStringVal() string {
	if m != nil {
		return m.StringVal
	}
	return ""
}

func init() {
	proto.RegisterEnum("service.Service_ServicePort_IntOrString_Type", Service_ServicePort_IntOrString_Type_name, Service_ServicePort_IntOrString_Type_value)
	proto.RegisterType((*Service)(nil), "service.Service")
	proto.RegisterMapType((map[string]string)(nil), "service.Service.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "service.Service.SelectorEntry")
	proto.RegisterType((*Service_ServicePort)(nil), "service.Service.ServicePort")
	proto.RegisterType((*Service_ServicePort_IntOrString)(nil), "service.Service.ServicePort.IntOrString")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0x1b, 0x3d,
	0x10, 0xfd, 0x96, 0xfc, 0xcf, 0x92, 0x10, 0xf9, 0x6b, 0xc1, 0x4a, 0x29, 0x0a, 0xa8, 0x52, 0xd3,
	0x8b, 0x46, 0x15, 0x48, 0x15, 0xa2, 0x55, 0x25, 0x8a, 0x50, 0xb5, 0x17, 0xa5, 0x68, 0x93, 0x72,
	0xbb, 0x72, 0x16, 0x13, 0x2c, 0x8c, 0xbd, 0xb2, 0x1d, 0xd4, 0xbc, 0x48, 0x9f, 0xa1, 0x0f, 0xd6,
	0x07, 0xa9, 0x3c, 0xde, 0x40, 0xa0, 0xa8, 0x6a, 0xaf, 0xd6, 0x3e, 0xe7, 0x4c, 0x66, 0xc6, 0x73,
	0x26, 0xd0, 0xb6, 0xdc, 0xdc, 0x88, 0x9c, 0x0f, 0x0b, 0xa3, 0x9d, 0x26, 0x8d, 0xf2, 0xba, 0xf3,
	0xbd, 0x05, 0x8d, 0x51, 0x38, 0x13, 0x02, 0x55, 0xc5, 0xae, 0x39, 0x8d, 0xfa, 0xd1, 0xa0, 0x95,
	0xe2, 0x99, 0x6c, 0x42, 0xcb, 0x7f, 0x6d, 0xc1, 0x72, 0x4e, 0x57, 0x90, 0xb8, 0x03, 0xc8, 0x1b,
	0xa8, 0x16, 0xda, 0x38, 0x5a, 0xe9, 0x57, 0x06, 0xf1, 0xee, 0xe6, 0x70, 0x91, 0x64, 0x74, 0xff,
	0x7b, 0xaa, 0x8d, 0x4b, 0x51, 0x49, 0x0e, 0xa0, 0x69, 0xb9, 0xe4, 0xb9, 0xd3, 0x86, 0x56, 0x31,
	0x6a, 0xeb, 0x91, 0xa8, 0x20, 0x38, 0x56, 0xce, 0xcc, 0xd3, 0x5b, 0x3d, 0x79, 0x0e, 0x90, 0xcb,
	0x99, 0x75, 0xdc, 0x64, 0xa2, 0xa0, 0xb5, 0x50, 0x4c, 0x89, 0x24, 0x05, 0xd9, 0x86, 0xd5, 0xf2,
	0x97, 0x32, 0x37, 0x2f, 0x38, 0xad, 0xa3, 0x20, 0x2e, 0xb1, 0xf1, 0xbc, 0xe0, 0x5e, 0xc2, 0xbf,
	0x39, 0x6e, 0x14, 0x93, 0x99, 0x28, 0x2c, 0x6d, 0xf4, 0x2b, 0x5e, 0xb2, 0xc0, 0x92, 0xc2, 0x92,
	0x17, 0xd0, 0x91, 0x93, 0x4c, 0xa8, 0xa9, 0xe1, 0xd6, 0xa2, 0xa8, 0x89, 0xa2, 0x55, 0x39, 0x49,
	0x02, 0xe8, 0x55, 0xaf, 0xa0, 0x6b, 0xb9, 0xb5, 0x42, 0xab, 0x8c, 0x5d, 0x5c, 0x08, 0x25, 0xdc,
	0x9c, 0xb6, 0x30, 0xdf, 0x5a, 0x89, 0x1f, 0x96, 0x30, 0x79, 0x09, 0x6b, 0x52, 0xb3, 0xf3, 0x09,
	0x93, 0x4c, 0xe5, 0xa1, 0x74, 0x40, 0x65, 0x67, 0x19, 0x4e, 0x0a, 0xf2, 0x1e, 0x7a, 0xf7, 0x84,
	0x56, 0xcf, 0x4c, 0xce, 0x33, 0xc3, 0xd4, 0x94, 0x5b, 0x1a, 0x63, 0x15, 0x74, 0x59, 0x31, 0x42,
	0x41, 0x8a, 0x3c, 0x79, 0x0b, 0x1b, 0xb7, 0xad, 0x39, 0xe3, 0x8b, 0xca, 0xb3, 0x42, 0x4b, 0x91,
	0xcf, 0xe9, 0x2a, 0xa6, 0x7b, 0xba, 0xa0, 0xc7, 0x81, 0x3d, 0x45, 0x92, 0xec, 0xc1, 0xfa, 0x25,
	0x67, 0xd2, 0x5d, 0x66, 0xf9, 0x25, 0xcf, 0xaf, 0x32, 0xa5, 0xcf, 0x79, 0x86, 0x43, 0x6d, 0xf7,
	0xa3, 0x41, 0x2d, 0xfd, 0x3f, 0xb0, 0x47, 0x9e, 0x3c, 0xd1, 0xe7, 0x38, 0x4b, 0xb2, 0x0f, 0xf4,
	0x61, 0xfb, 0x99, 0x13, 0xd7, 0x5c, 0xcf, 0x1c, 0xed, 0xf4, 0xa3, 0x41, 0x3b, 0x5d, 0x7f, 0xf0,
	0x0c, 0xe3, 0xc0, 0x92, 0x23, 0x88, 0x99, 0x52, 0xda, 0x31, 0x27, 0xb4, 0xb2, 0x74, 0x0d, 0x2d,
	0xb0, 0xfd, 0x9b, 0x05, 0x0e, 0xef, 0x34, 0xc1, 0x05, 0xcb, 0x51, 0xbd, 0x9f, 0x2b, 0x10, 0x2f,
	0x59, 0xeb, 0x51, 0xe3, 0xf6, 0xa0, 0x89, 0x56, 0xcf, 0xb5, 0x2c, 0x7d, 0x7b, 0x7b, 0xf7, 0xfa,
	0xd2, 0xb6, 0xbe, 0xc3, 0x60, 0xcc, 0x04, 0x62, 0xc7, 0xcc, 0x94, 0xbb, 0xd0, 0x7c, 0xb5, 0x1f,
	0x0d, 0xe2, 0xdd, 0xc1, 0x9f, 0x1c, 0x3d, 0x4c, 0x94, 0xfb, 0x62, 0x46, 0xce, 0x08, 0x35, 0x4d,
	0x21, 0x04, 0x63, 0x39, 0xcf, 0xa0, 0x75, 0xf7, 0x8a, 0x35, 0xcc, 0xd1, 0x54, 0xe5, 0xd3, 0xf5,
	0x7e, 0x44, 0x10, 0x2f, 0x05, 0x92, 0x43, 0xa8, 0xa2, 0x5b, 0x7d, 0xed, 0x9d, 0xdd, 0xd7, 0x7f,
	0x9b, 0x70, 0xe8, 0xfd, 0x9c, 0x62, 0x28, 0xd9, 0x80, 0x86, 0x50, 0x2e, 0xbb, 0x61, 0xa1, 0xd3,
	0x5a, 0x5a, 0x17, 0xca, 0x9d, 0x31, 0xe9, 0x17, 0xc6, 0xa2, 0x1a, 0xb9, 0x4a, 0x58, 0x98, 0x80,
	0x9c, 0x31, 0xb9, 0xb3, 0x05, 0x55, 0xdc, 0x0a, 0x80, 0xfa, 0xc9, 0xd7, 0xcf, 0x1f, 0x8f, 0xd3,
	0xee, 0x7f, 0xfe, 0x3c, 0x1a, 0xa7, 0xc9, 0xc9, 0xa7, 0x6e, 0xd4, 0x7b, 0x07, 0xed, 0x7b, 0xab,
	0x48, 0xba, 0x50, 0xb9, 0xe2, 0xf3, 0xf2, 0x99, 0xfd, 0x91, 0x3c, 0x81, 0xda, 0x0d, 0x93, 0xb3,
	0xc5, 0x5f, 0x43, 0xb8, 0x1c, 0xac, 0xec, 0x47, 0xbd, 0x0f, 0xd0, 0x7d, 0x38, 0xc4, 0x7f, 0x89,
	0x9f, 0xd4, 0x71, 0x5a, 0x7b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xb0, 0x09, 0x7c, 0xb9,
	0x04, 0x00, 0x00,
}
