// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vppnode.proto

package vppnode

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// VppNode represents a node in the k8s cluster with container networking
// based on VPP vswitch.
// The key attribute is the integer attribute <id>, a cluster-wide unique
// identifier starting from 1 and re-using free entries, used primarily to dissect
// cluster IP ranges to obtain subnets suitable for address allocation
// for endpoints inside the given node.
// <name> is the node identifier as used by Kubernetes.
// <ip_addresses> is a list of IP addresses assigned to the node in the VPP network
// stack. As opposed to node management IP addresses, which are assigned to host
// interfaces, these IP addresses are not known to Kubernetes. For compatibility
// with older Contiv versions, <ip_address> should be appended to <ip_addresses>
// to get all the VPP node IP addresses.
type VppNode struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpAddress            string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpAddresses          []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VppNode) Reset()         { *m = VppNode{} }
func (m *VppNode) String() string { return proto.CompactTextString(m) }
func (*VppNode) ProtoMessage()    {}
func (*VppNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b362a3d7e0816df, []int{0}
}
func (m *VppNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VppNode.Unmarshal(m, b)
}
func (m *VppNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VppNode.Marshal(b, m, deterministic)
}
func (m *VppNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VppNode.Merge(m, src)
}
func (m *VppNode) XXX_Size() int {
	return xxx_messageInfo_VppNode.Size(m)
}
func (m *VppNode) XXX_DiscardUnknown() {
	xxx_messageInfo_VppNode.DiscardUnknown(m)
}

var xxx_messageInfo_VppNode proto.InternalMessageInfo

func (m *VppNode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VppNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VppNode) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VppNode) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*VppNode)(nil), "vppnode.VppNode")
}

func init() { proto.RegisterFile("vppnode.proto", fileDescriptor_1b362a3d7e0816df) }

var fileDescriptor_1b362a3d7e0816df = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2b, 0x28, 0xc8,
	0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x7a, 0x18,
	0xb9, 0xd8, 0xc3, 0x0a, 0x0a, 0xfc, 0xf2, 0x53, 0x52, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x59, 0x2e, 0xae, 0xcc, 0x82,
	0xf8, 0xc4, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x66, 0xb0, 0x0c, 0x67, 0x66, 0x81, 0x23,
	0x44, 0x40, 0x48, 0x91, 0x8b, 0x07, 0x21, 0x9d, 0x5a, 0x2c, 0xc1, 0xaa, 0xc0, 0xac, 0xc1, 0x19,
	0xc4, 0x0d, 0x57, 0x90, 0x5a, 0xec, 0xc5, 0xc2, 0xc1, 0x22, 0xc0, 0x1a, 0x24, 0x9a, 0x9b, 0x98,
	0x97, 0x98, 0x9e, 0x9a, 0x9b, 0x9a, 0x57, 0x12, 0x8f, 0xd0, 0x91, 0xc4, 0x06, 0x76, 0x9e, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x99, 0x5f, 0x7f, 0xaf, 0x00, 0x00, 0x00,
}
